basePath: /api
definitions:
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.ResultAPI:
    properties:
      nStatusCode:
        type: integer
      objResult: {}
      sMessage:
        type: string
    type: object
  models.User:
    properties:
      crsf_token:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      session_token:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /authen/login:
    post:
      consumes:
      - application/json
      description: Authenticates user with username and password, and sets cookies
        for JWT, session, and CSRF
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "500":
          description: Internal server/database error
          schema:
            $ref: '#/definitions/models.ResultAPI'
      summary: Login user
      tags:
      - Auth
  /authen/logout:
    post:
      description: Clears authentication cookies and session from database for the
        current user
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "401":
          description: Invalid or missing token
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "500":
          description: Failed to clear session
          schema:
            $ref: '#/definitions/models.ResultAPI'
      security:
      - ApiKeyAuth: []
      summary: Logout user
      tags:
      - Auth
  /authen/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with a unique username and password
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "406":
          description: Validation error
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "409":
          description: Username conflict
          schema:
            $ref: '#/definitions/models.ResultAPI'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.ResultAPI'
      summary: Register new user
      tags:
      - Auth
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"

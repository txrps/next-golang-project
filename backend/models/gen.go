// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                      db,
		TbGenerateBarcode:       newTbGenerateBarcode(db, opts...),
		TbRoute:                 newTbRoute(db, opts...),
		TmCountry:               newTmCountry(db, opts...),
		TmDistrict:              newTmDistrict(db, opts...),
		TmMasterDataType:        newTmMasterDataType(db, opts...),
		TmMasterDatum:           newTmMasterDatum(db, opts...),
		TmMenu:                  newTmMenu(db, opts...),
		TmProvince:              newTmProvince(db, opts...),
		TmRole:                  newTmRole(db, opts...),
		TmRoleMappingPermission: newTmRoleMappingPermission(db, opts...),
		TmSubdistrict:           newTmSubdistrict(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TbGenerateBarcode       tbGenerateBarcode
	TbRoute                 tbRoute
	TmCountry               tmCountry
	TmDistrict              tmDistrict
	TmMasterDataType        tmMasterDataType
	TmMasterDatum           tmMasterDatum
	TmMenu                  tmMenu
	TmProvince              tmProvince
	TmRole                  tmRole
	TmRoleMappingPermission tmRoleMappingPermission
	TmSubdistrict           tmSubdistrict
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		TbGenerateBarcode:       q.TbGenerateBarcode.clone(db),
		TbRoute:                 q.TbRoute.clone(db),
		TmCountry:               q.TmCountry.clone(db),
		TmDistrict:              q.TmDistrict.clone(db),
		TmMasterDataType:        q.TmMasterDataType.clone(db),
		TmMasterDatum:           q.TmMasterDatum.clone(db),
		TmMenu:                  q.TmMenu.clone(db),
		TmProvince:              q.TmProvince.clone(db),
		TmRole:                  q.TmRole.clone(db),
		TmRoleMappingPermission: q.TmRoleMappingPermission.clone(db),
		TmSubdistrict:           q.TmSubdistrict.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                      db,
		TbGenerateBarcode:       q.TbGenerateBarcode.replaceDB(db),
		TbRoute:                 q.TbRoute.replaceDB(db),
		TmCountry:               q.TmCountry.replaceDB(db),
		TmDistrict:              q.TmDistrict.replaceDB(db),
		TmMasterDataType:        q.TmMasterDataType.replaceDB(db),
		TmMasterDatum:           q.TmMasterDatum.replaceDB(db),
		TmMenu:                  q.TmMenu.replaceDB(db),
		TmProvince:              q.TmProvince.replaceDB(db),
		TmRole:                  q.TmRole.replaceDB(db),
		TmRoleMappingPermission: q.TmRoleMappingPermission.replaceDB(db),
		TmSubdistrict:           q.TmSubdistrict.replaceDB(db),
	}
}

type queryCtx struct {
	TbGenerateBarcode       *tbGenerateBarcodeDo
	TbRoute                 *tbRouteDo
	TmCountry               *tmCountryDo
	TmDistrict              *tmDistrictDo
	TmMasterDataType        *tmMasterDataTypeDo
	TmMasterDatum           *tmMasterDatumDo
	TmMenu                  *tmMenuDo
	TmProvince              *tmProvinceDo
	TmRole                  *tmRoleDo
	TmRoleMappingPermission *tmRoleMappingPermissionDo
	TmSubdistrict           *tmSubdistrictDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TbGenerateBarcode:       q.TbGenerateBarcode.WithContext(ctx),
		TbRoute:                 q.TbRoute.WithContext(ctx),
		TmCountry:               q.TmCountry.WithContext(ctx),
		TmDistrict:              q.TmDistrict.WithContext(ctx),
		TmMasterDataType:        q.TmMasterDataType.WithContext(ctx),
		TmMasterDatum:           q.TmMasterDatum.WithContext(ctx),
		TmMenu:                  q.TmMenu.WithContext(ctx),
		TmProvince:              q.TmProvince.WithContext(ctx),
		TmRole:                  q.TmRole.WithContext(ctx),
		TmRoleMappingPermission: q.TmRoleMappingPermission.WithContext(ctx),
		TmSubdistrict:           q.TmSubdistrict.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/txrps/next-golang-project/model"
)

func newTbRoute(db *gorm.DB, opts ...gen.DOOption) tbRoute {
	_tbRoute := tbRoute{}

	_tbRoute.tbRouteDo.UseDB(db, opts...)
	_tbRoute.tbRouteDo.UseModel(&model.TbRoute{})

	tableName := _tbRoute.tbRouteDo.TableName()
	_tbRoute.ALL = field.NewAsterisk(tableName)
	_tbRoute.RouteID = field.NewInt32(tableName, "route_id")
	_tbRoute.Road = field.NewString(tableName, "road")
	_tbRoute.PostcalCode = field.NewString(tableName, "postcal_code")
	_tbRoute.CountryID = field.NewInt32(tableName, "country_id")
	_tbRoute.ProvinceID = field.NewInt32(tableName, "province_id")
	_tbRoute.DistrictID = field.NewInt32(tableName, "district_id")
	_tbRoute.SubDistrictID = field.NewInt32(tableName, "sub_district_id")
	_tbRoute.CreatedAt = field.NewTime(tableName, "created_at")
	_tbRoute.CreatedBy = field.NewString(tableName, "created_by")
	_tbRoute.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbRoute.UpdatedBy = field.NewString(tableName, "updated_by")
	_tbRoute.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbRoute.DeletedBy = field.NewString(tableName, "deleted_by")
	_tbRoute.IsDelete = field.NewBool(tableName, "is_delete")

	_tbRoute.fillFieldMap()

	return _tbRoute
}

type tbRoute struct {
	tbRouteDo

	ALL           field.Asterisk
	RouteID       field.Int32
	Road          field.String
	PostcalCode   field.String
	CountryID     field.Int32
	ProvinceID    field.Int32
	DistrictID    field.Int32
	SubDistrictID field.Int32
	CreatedAt     field.Time
	CreatedBy     field.String
	UpdatedAt     field.Time
	UpdatedBy     field.String
	DeletedAt     field.Field
	DeletedBy     field.String
	IsDelete      field.Bool

	fieldMap map[string]field.Expr
}

func (t tbRoute) Table(newTableName string) *tbRoute {
	t.tbRouteDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbRoute) As(alias string) *tbRoute {
	t.tbRouteDo.DO = *(t.tbRouteDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbRoute) updateTableName(table string) *tbRoute {
	t.ALL = field.NewAsterisk(table)
	t.RouteID = field.NewInt32(table, "route_id")
	t.Road = field.NewString(table, "road")
	t.PostcalCode = field.NewString(table, "postcal_code")
	t.CountryID = field.NewInt32(table, "country_id")
	t.ProvinceID = field.NewInt32(table, "province_id")
	t.DistrictID = field.NewInt32(table, "district_id")
	t.SubDistrictID = field.NewInt32(table, "sub_district_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.CreatedBy = field.NewString(table, "created_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.DeletedBy = field.NewString(table, "deleted_by")
	t.IsDelete = field.NewBool(table, "is_delete")

	t.fillFieldMap()

	return t
}

func (t *tbRoute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbRoute) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["route_id"] = t.RouteID
	t.fieldMap["road"] = t.Road
	t.fieldMap["postcal_code"] = t.PostcalCode
	t.fieldMap["country_id"] = t.CountryID
	t.fieldMap["province_id"] = t.ProvinceID
	t.fieldMap["district_id"] = t.DistrictID
	t.fieldMap["sub_district_id"] = t.SubDistrictID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["deleted_by"] = t.DeletedBy
	t.fieldMap["is_delete"] = t.IsDelete
}

func (t tbRoute) clone(db *gorm.DB) tbRoute {
	t.tbRouteDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbRoute) replaceDB(db *gorm.DB) tbRoute {
	t.tbRouteDo.ReplaceDB(db)
	return t
}

type tbRouteDo struct{ gen.DO }

func (t tbRouteDo) Debug() *tbRouteDo {
	return t.withDO(t.DO.Debug())
}

func (t tbRouteDo) WithContext(ctx context.Context) *tbRouteDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbRouteDo) ReadDB() *tbRouteDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbRouteDo) WriteDB() *tbRouteDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbRouteDo) Session(config *gorm.Session) *tbRouteDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbRouteDo) Clauses(conds ...clause.Expression) *tbRouteDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbRouteDo) Returning(value interface{}, columns ...string) *tbRouteDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbRouteDo) Not(conds ...gen.Condition) *tbRouteDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbRouteDo) Or(conds ...gen.Condition) *tbRouteDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbRouteDo) Select(conds ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbRouteDo) Where(conds ...gen.Condition) *tbRouteDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbRouteDo) Order(conds ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbRouteDo) Distinct(cols ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbRouteDo) Omit(cols ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbRouteDo) Join(table schema.Tabler, on ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbRouteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbRouteDo) RightJoin(table schema.Tabler, on ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbRouteDo) Group(cols ...field.Expr) *tbRouteDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbRouteDo) Having(conds ...gen.Condition) *tbRouteDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbRouteDo) Limit(limit int) *tbRouteDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbRouteDo) Offset(offset int) *tbRouteDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbRouteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tbRouteDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbRouteDo) Unscoped() *tbRouteDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbRouteDo) Create(values ...*model.TbRoute) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbRouteDo) CreateInBatches(values []*model.TbRoute, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbRouteDo) Save(values ...*model.TbRoute) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbRouteDo) First() (*model.TbRoute, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbRoute), nil
	}
}

func (t tbRouteDo) Take() (*model.TbRoute, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbRoute), nil
	}
}

func (t tbRouteDo) Last() (*model.TbRoute, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbRoute), nil
	}
}

func (t tbRouteDo) Find() ([]*model.TbRoute, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbRoute), err
}

func (t tbRouteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbRoute, err error) {
	buf := make([]*model.TbRoute, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbRouteDo) FindInBatches(result *[]*model.TbRoute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbRouteDo) Attrs(attrs ...field.AssignExpr) *tbRouteDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbRouteDo) Assign(attrs ...field.AssignExpr) *tbRouteDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbRouteDo) Joins(fields ...field.RelationField) *tbRouteDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbRouteDo) Preload(fields ...field.RelationField) *tbRouteDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbRouteDo) FirstOrInit() (*model.TbRoute, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbRoute), nil
	}
}

func (t tbRouteDo) FirstOrCreate() (*model.TbRoute, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbRoute), nil
	}
}

func (t tbRouteDo) FindByPage(offset int, limit int) (result []*model.TbRoute, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbRouteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbRouteDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbRouteDo) Delete(models ...*model.TbRoute) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbRouteDo) withDO(do gen.Dao) *tbRouteDo {
	t.DO = *do.(*gen.DO)
	return t
}

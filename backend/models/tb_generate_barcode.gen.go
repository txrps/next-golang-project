// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/txrps/next-golang-project/model"
)

func newTbGenerateBarcode(db *gorm.DB, opts ...gen.DOOption) tbGenerateBarcode {
	_tbGenerateBarcode := tbGenerateBarcode{}

	_tbGenerateBarcode.tbGenerateBarcodeDo.UseDB(db, opts...)
	_tbGenerateBarcode.tbGenerateBarcodeDo.UseModel(&model.TbGenerateBarcode{})

	tableName := _tbGenerateBarcode.tbGenerateBarcodeDo.TableName()
	_tbGenerateBarcode.ALL = field.NewAsterisk(tableName)
	_tbGenerateBarcode.GenerateID = field.NewInt32(tableName, "generate_id")
	_tbGenerateBarcode.MailTypeID = field.NewInt32(tableName, "mail_type_id")
	_tbGenerateBarcode.Year = field.NewInt32(tableName, "year")
	_tbGenerateBarcode.BarcodeFrom = field.NewString(tableName, "barcode_from")
	_tbGenerateBarcode.BarcodeTo = field.NewString(tableName, "barcode_to")
	_tbGenerateBarcode.Quality = field.NewInt64(tableName, "quality")
	_tbGenerateBarcode.DocTypeID = field.NewInt32(tableName, "doc_type_id")
	_tbGenerateBarcode.CreatedAt = field.NewTime(tableName, "created_at")
	_tbGenerateBarcode.CreatedBy = field.NewString(tableName, "created_by")
	_tbGenerateBarcode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbGenerateBarcode.UpdatedBy = field.NewString(tableName, "updated_by")
	_tbGenerateBarcode.DeletedAt = field.NewField(tableName, "deleted_at")
	_tbGenerateBarcode.DeletedBy = field.NewString(tableName, "deleted_by")
	_tbGenerateBarcode.IsDelete = field.NewBool(tableName, "is_delete")

	_tbGenerateBarcode.fillFieldMap()

	return _tbGenerateBarcode
}

type tbGenerateBarcode struct {
	tbGenerateBarcodeDo

	ALL         field.Asterisk
	GenerateID  field.Int32
	MailTypeID  field.Int32
	Year        field.Int32
	BarcodeFrom field.String
	BarcodeTo   field.String
	Quality     field.Int64
	DocTypeID   field.Int32
	CreatedAt   field.Time
	CreatedBy   field.String
	UpdatedAt   field.Time
	UpdatedBy   field.String
	DeletedAt   field.Field
	DeletedBy   field.String
	IsDelete    field.Bool

	fieldMap map[string]field.Expr
}

func (t tbGenerateBarcode) Table(newTableName string) *tbGenerateBarcode {
	t.tbGenerateBarcodeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbGenerateBarcode) As(alias string) *tbGenerateBarcode {
	t.tbGenerateBarcodeDo.DO = *(t.tbGenerateBarcodeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbGenerateBarcode) updateTableName(table string) *tbGenerateBarcode {
	t.ALL = field.NewAsterisk(table)
	t.GenerateID = field.NewInt32(table, "generate_id")
	t.MailTypeID = field.NewInt32(table, "mail_type_id")
	t.Year = field.NewInt32(table, "year")
	t.BarcodeFrom = field.NewString(table, "barcode_from")
	t.BarcodeTo = field.NewString(table, "barcode_to")
	t.Quality = field.NewInt64(table, "quality")
	t.DocTypeID = field.NewInt32(table, "doc_type_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.CreatedBy = field.NewString(table, "created_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.DeletedBy = field.NewString(table, "deleted_by")
	t.IsDelete = field.NewBool(table, "is_delete")

	t.fillFieldMap()

	return t
}

func (t *tbGenerateBarcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbGenerateBarcode) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["generate_id"] = t.GenerateID
	t.fieldMap["mail_type_id"] = t.MailTypeID
	t.fieldMap["year"] = t.Year
	t.fieldMap["barcode_from"] = t.BarcodeFrom
	t.fieldMap["barcode_to"] = t.BarcodeTo
	t.fieldMap["quality"] = t.Quality
	t.fieldMap["doc_type_id"] = t.DocTypeID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["deleted_by"] = t.DeletedBy
	t.fieldMap["is_delete"] = t.IsDelete
}

func (t tbGenerateBarcode) clone(db *gorm.DB) tbGenerateBarcode {
	t.tbGenerateBarcodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbGenerateBarcode) replaceDB(db *gorm.DB) tbGenerateBarcode {
	t.tbGenerateBarcodeDo.ReplaceDB(db)
	return t
}

type tbGenerateBarcodeDo struct{ gen.DO }

func (t tbGenerateBarcodeDo) Debug() *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Debug())
}

func (t tbGenerateBarcodeDo) WithContext(ctx context.Context) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbGenerateBarcodeDo) ReadDB() *tbGenerateBarcodeDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbGenerateBarcodeDo) WriteDB() *tbGenerateBarcodeDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbGenerateBarcodeDo) Session(config *gorm.Session) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbGenerateBarcodeDo) Clauses(conds ...clause.Expression) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbGenerateBarcodeDo) Returning(value interface{}, columns ...string) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbGenerateBarcodeDo) Not(conds ...gen.Condition) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbGenerateBarcodeDo) Or(conds ...gen.Condition) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbGenerateBarcodeDo) Select(conds ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbGenerateBarcodeDo) Where(conds ...gen.Condition) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbGenerateBarcodeDo) Order(conds ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbGenerateBarcodeDo) Distinct(cols ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbGenerateBarcodeDo) Omit(cols ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbGenerateBarcodeDo) Join(table schema.Tabler, on ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbGenerateBarcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbGenerateBarcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbGenerateBarcodeDo) Group(cols ...field.Expr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbGenerateBarcodeDo) Having(conds ...gen.Condition) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbGenerateBarcodeDo) Limit(limit int) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbGenerateBarcodeDo) Offset(offset int) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbGenerateBarcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbGenerateBarcodeDo) Unscoped() *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbGenerateBarcodeDo) Create(values ...*model.TbGenerateBarcode) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbGenerateBarcodeDo) CreateInBatches(values []*model.TbGenerateBarcode, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbGenerateBarcodeDo) Save(values ...*model.TbGenerateBarcode) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbGenerateBarcodeDo) First() (*model.TbGenerateBarcode, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbGenerateBarcode), nil
	}
}

func (t tbGenerateBarcodeDo) Take() (*model.TbGenerateBarcode, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbGenerateBarcode), nil
	}
}

func (t tbGenerateBarcodeDo) Last() (*model.TbGenerateBarcode, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbGenerateBarcode), nil
	}
}

func (t tbGenerateBarcodeDo) Find() ([]*model.TbGenerateBarcode, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbGenerateBarcode), err
}

func (t tbGenerateBarcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbGenerateBarcode, err error) {
	buf := make([]*model.TbGenerateBarcode, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbGenerateBarcodeDo) FindInBatches(result *[]*model.TbGenerateBarcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbGenerateBarcodeDo) Attrs(attrs ...field.AssignExpr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbGenerateBarcodeDo) Assign(attrs ...field.AssignExpr) *tbGenerateBarcodeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbGenerateBarcodeDo) Joins(fields ...field.RelationField) *tbGenerateBarcodeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbGenerateBarcodeDo) Preload(fields ...field.RelationField) *tbGenerateBarcodeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbGenerateBarcodeDo) FirstOrInit() (*model.TbGenerateBarcode, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbGenerateBarcode), nil
	}
}

func (t tbGenerateBarcodeDo) FirstOrCreate() (*model.TbGenerateBarcode, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbGenerateBarcode), nil
	}
}

func (t tbGenerateBarcodeDo) FindByPage(offset int, limit int) (result []*model.TbGenerateBarcode, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbGenerateBarcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbGenerateBarcodeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbGenerateBarcodeDo) Delete(models ...*model.TbGenerateBarcode) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbGenerateBarcodeDo) withDO(do gen.Dao) *tbGenerateBarcodeDo {
	t.DO = *do.(*gen.DO)
	return t
}

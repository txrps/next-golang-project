// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/txrps/next-golang-project/model"
)

func newTmRole(db *gorm.DB, opts ...gen.DOOption) tmRole {
	_tmRole := tmRole{}

	_tmRole.tmRoleDo.UseDB(db, opts...)
	_tmRole.tmRoleDo.UseModel(&model.TmRole{})

	tableName := _tmRole.tmRoleDo.TableName()
	_tmRole.ALL = field.NewAsterisk(tableName)
	_tmRole.RoleID = field.NewInt32(tableName, "role_id")
	_tmRole.RoleName = field.NewString(tableName, "role_name")
	_tmRole.IsActive = field.NewBool(tableName, "is_active")

	_tmRole.fillFieldMap()

	return _tmRole
}

type tmRole struct {
	tmRoleDo

	ALL      field.Asterisk
	RoleID   field.Int32
	RoleName field.String
	IsActive field.Bool

	fieldMap map[string]field.Expr
}

func (t tmRole) Table(newTableName string) *tmRole {
	t.tmRoleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tmRole) As(alias string) *tmRole {
	t.tmRoleDo.DO = *(t.tmRoleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tmRole) updateTableName(table string) *tmRole {
	t.ALL = field.NewAsterisk(table)
	t.RoleID = field.NewInt32(table, "role_id")
	t.RoleName = field.NewString(table, "role_name")
	t.IsActive = field.NewBool(table, "is_active")

	t.fillFieldMap()

	return t
}

func (t *tmRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tmRole) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["role_id"] = t.RoleID
	t.fieldMap["role_name"] = t.RoleName
	t.fieldMap["is_active"] = t.IsActive
}

func (t tmRole) clone(db *gorm.DB) tmRole {
	t.tmRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tmRole) replaceDB(db *gorm.DB) tmRole {
	t.tmRoleDo.ReplaceDB(db)
	return t
}

type tmRoleDo struct{ gen.DO }

func (t tmRoleDo) Debug() *tmRoleDo {
	return t.withDO(t.DO.Debug())
}

func (t tmRoleDo) WithContext(ctx context.Context) *tmRoleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tmRoleDo) ReadDB() *tmRoleDo {
	return t.Clauses(dbresolver.Read)
}

func (t tmRoleDo) WriteDB() *tmRoleDo {
	return t.Clauses(dbresolver.Write)
}

func (t tmRoleDo) Session(config *gorm.Session) *tmRoleDo {
	return t.withDO(t.DO.Session(config))
}

func (t tmRoleDo) Clauses(conds ...clause.Expression) *tmRoleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tmRoleDo) Returning(value interface{}, columns ...string) *tmRoleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tmRoleDo) Not(conds ...gen.Condition) *tmRoleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tmRoleDo) Or(conds ...gen.Condition) *tmRoleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tmRoleDo) Select(conds ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tmRoleDo) Where(conds ...gen.Condition) *tmRoleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tmRoleDo) Order(conds ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tmRoleDo) Distinct(cols ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tmRoleDo) Omit(cols ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tmRoleDo) Join(table schema.Tabler, on ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tmRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tmRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tmRoleDo) Group(cols ...field.Expr) *tmRoleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tmRoleDo) Having(conds ...gen.Condition) *tmRoleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tmRoleDo) Limit(limit int) *tmRoleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tmRoleDo) Offset(offset int) *tmRoleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tmRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tmRoleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tmRoleDo) Unscoped() *tmRoleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tmRoleDo) Create(values ...*model.TmRole) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tmRoleDo) CreateInBatches(values []*model.TmRole, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tmRoleDo) Save(values ...*model.TmRole) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tmRoleDo) First() (*model.TmRole, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmRole), nil
	}
}

func (t tmRoleDo) Take() (*model.TmRole, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmRole), nil
	}
}

func (t tmRoleDo) Last() (*model.TmRole, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmRole), nil
	}
}

func (t tmRoleDo) Find() ([]*model.TmRole, error) {
	result, err := t.DO.Find()
	return result.([]*model.TmRole), err
}

func (t tmRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TmRole, err error) {
	buf := make([]*model.TmRole, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tmRoleDo) FindInBatches(result *[]*model.TmRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tmRoleDo) Attrs(attrs ...field.AssignExpr) *tmRoleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tmRoleDo) Assign(attrs ...field.AssignExpr) *tmRoleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tmRoleDo) Joins(fields ...field.RelationField) *tmRoleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tmRoleDo) Preload(fields ...field.RelationField) *tmRoleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tmRoleDo) FirstOrInit() (*model.TmRole, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmRole), nil
	}
}

func (t tmRoleDo) FirstOrCreate() (*model.TmRole, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmRole), nil
	}
}

func (t tmRoleDo) FindByPage(offset int, limit int) (result []*model.TmRole, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tmRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tmRoleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tmRoleDo) Delete(models ...*model.TmRole) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tmRoleDo) withDO(do gen.Dao) *tmRoleDo {
	t.DO = *do.(*gen.DO)
	return t
}

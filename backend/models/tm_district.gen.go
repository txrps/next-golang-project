// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/txrps/next-golang-project/model"
)

func newTmDistrict(db *gorm.DB, opts ...gen.DOOption) tmDistrict {
	_tmDistrict := tmDistrict{}

	_tmDistrict.tmDistrictDo.UseDB(db, opts...)
	_tmDistrict.tmDistrictDo.UseModel(&model.TmDistrict{})

	tableName := _tmDistrict.tmDistrictDo.TableName()
	_tmDistrict.ALL = field.NewAsterisk(tableName)
	_tmDistrict.DistrictID = field.NewInt32(tableName, "district_id")
	_tmDistrict.DistrictName = field.NewString(tableName, "district_name")
	_tmDistrict.ProvinceID = field.NewInt32(tableName, "province_id")

	_tmDistrict.fillFieldMap()

	return _tmDistrict
}

type tmDistrict struct {
	tmDistrictDo

	ALL          field.Asterisk
	DistrictID   field.Int32
	DistrictName field.String
	ProvinceID   field.Int32

	fieldMap map[string]field.Expr
}

func (t tmDistrict) Table(newTableName string) *tmDistrict {
	t.tmDistrictDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tmDistrict) As(alias string) *tmDistrict {
	t.tmDistrictDo.DO = *(t.tmDistrictDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tmDistrict) updateTableName(table string) *tmDistrict {
	t.ALL = field.NewAsterisk(table)
	t.DistrictID = field.NewInt32(table, "district_id")
	t.DistrictName = field.NewString(table, "district_name")
	t.ProvinceID = field.NewInt32(table, "province_id")

	t.fillFieldMap()

	return t
}

func (t *tmDistrict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tmDistrict) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["district_id"] = t.DistrictID
	t.fieldMap["district_name"] = t.DistrictName
	t.fieldMap["province_id"] = t.ProvinceID
}

func (t tmDistrict) clone(db *gorm.DB) tmDistrict {
	t.tmDistrictDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tmDistrict) replaceDB(db *gorm.DB) tmDistrict {
	t.tmDistrictDo.ReplaceDB(db)
	return t
}

type tmDistrictDo struct{ gen.DO }

func (t tmDistrictDo) Debug() *tmDistrictDo {
	return t.withDO(t.DO.Debug())
}

func (t tmDistrictDo) WithContext(ctx context.Context) *tmDistrictDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tmDistrictDo) ReadDB() *tmDistrictDo {
	return t.Clauses(dbresolver.Read)
}

func (t tmDistrictDo) WriteDB() *tmDistrictDo {
	return t.Clauses(dbresolver.Write)
}

func (t tmDistrictDo) Session(config *gorm.Session) *tmDistrictDo {
	return t.withDO(t.DO.Session(config))
}

func (t tmDistrictDo) Clauses(conds ...clause.Expression) *tmDistrictDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tmDistrictDo) Returning(value interface{}, columns ...string) *tmDistrictDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tmDistrictDo) Not(conds ...gen.Condition) *tmDistrictDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tmDistrictDo) Or(conds ...gen.Condition) *tmDistrictDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tmDistrictDo) Select(conds ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tmDistrictDo) Where(conds ...gen.Condition) *tmDistrictDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tmDistrictDo) Order(conds ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tmDistrictDo) Distinct(cols ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tmDistrictDo) Omit(cols ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tmDistrictDo) Join(table schema.Tabler, on ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tmDistrictDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tmDistrictDo) RightJoin(table schema.Tabler, on ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tmDistrictDo) Group(cols ...field.Expr) *tmDistrictDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tmDistrictDo) Having(conds ...gen.Condition) *tmDistrictDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tmDistrictDo) Limit(limit int) *tmDistrictDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tmDistrictDo) Offset(offset int) *tmDistrictDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tmDistrictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tmDistrictDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tmDistrictDo) Unscoped() *tmDistrictDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tmDistrictDo) Create(values ...*model.TmDistrict) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tmDistrictDo) CreateInBatches(values []*model.TmDistrict, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tmDistrictDo) Save(values ...*model.TmDistrict) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tmDistrictDo) First() (*model.TmDistrict, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmDistrict), nil
	}
}

func (t tmDistrictDo) Take() (*model.TmDistrict, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmDistrict), nil
	}
}

func (t tmDistrictDo) Last() (*model.TmDistrict, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmDistrict), nil
	}
}

func (t tmDistrictDo) Find() ([]*model.TmDistrict, error) {
	result, err := t.DO.Find()
	return result.([]*model.TmDistrict), err
}

func (t tmDistrictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TmDistrict, err error) {
	buf := make([]*model.TmDistrict, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tmDistrictDo) FindInBatches(result *[]*model.TmDistrict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tmDistrictDo) Attrs(attrs ...field.AssignExpr) *tmDistrictDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tmDistrictDo) Assign(attrs ...field.AssignExpr) *tmDistrictDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tmDistrictDo) Joins(fields ...field.RelationField) *tmDistrictDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tmDistrictDo) Preload(fields ...field.RelationField) *tmDistrictDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tmDistrictDo) FirstOrInit() (*model.TmDistrict, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmDistrict), nil
	}
}

func (t tmDistrictDo) FirstOrCreate() (*model.TmDistrict, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmDistrict), nil
	}
}

func (t tmDistrictDo) FindByPage(offset int, limit int) (result []*model.TmDistrict, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tmDistrictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tmDistrictDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tmDistrictDo) Delete(models ...*model.TmDistrict) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tmDistrictDo) withDO(do gen.Dao) *tmDistrictDo {
	t.DO = *do.(*gen.DO)
	return t
}

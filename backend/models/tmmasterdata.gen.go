// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/txrps/next-golang-project/model"
)

func newTmMasterDatum(db *gorm.DB, opts ...gen.DOOption) tmMasterDatum {
	_tmMasterDatum := tmMasterDatum{}

	_tmMasterDatum.tmMasterDatumDo.UseDB(db, opts...)
	_tmMasterDatum.tmMasterDatumDo.UseModel(&model.TmMasterDatum{})

	tableName := _tmMasterDatum.tmMasterDatumDo.TableName()
	_tmMasterDatum.ALL = field.NewAsterisk(tableName)
	_tmMasterDatum.MasterDataID = field.NewInt32(tableName, "MasterDataID")
	_tmMasterDatum.MasterDataName = field.NewString(tableName, "MasterDataName")
	_tmMasterDatum.IsActive = field.NewBool(tableName, "IsActive")
	_tmMasterDatum.MasterDataTypeID = field.NewInt32(tableName, "MasterDataTypeID")
	_tmMasterDatum.Code = field.NewString(tableName, "Code")

	_tmMasterDatum.fillFieldMap()

	return _tmMasterDatum
}

type tmMasterDatum struct {
	tmMasterDatumDo

	ALL              field.Asterisk
	MasterDataID     field.Int32
	MasterDataName   field.String
	IsActive         field.Bool
	MasterDataTypeID field.Int32
	Code             field.String

	fieldMap map[string]field.Expr
}

func (t tmMasterDatum) Table(newTableName string) *tmMasterDatum {
	t.tmMasterDatumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tmMasterDatum) As(alias string) *tmMasterDatum {
	t.tmMasterDatumDo.DO = *(t.tmMasterDatumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tmMasterDatum) updateTableName(table string) *tmMasterDatum {
	t.ALL = field.NewAsterisk(table)
	t.MasterDataID = field.NewInt32(table, "MasterDataID")
	t.MasterDataName = field.NewString(table, "MasterDataName")
	t.IsActive = field.NewBool(table, "IsActive")
	t.MasterDataTypeID = field.NewInt32(table, "MasterDataTypeID")
	t.Code = field.NewString(table, "Code")

	t.fillFieldMap()

	return t
}

func (t *tmMasterDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tmMasterDatum) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["MasterDataID"] = t.MasterDataID
	t.fieldMap["MasterDataName"] = t.MasterDataName
	t.fieldMap["IsActive"] = t.IsActive
	t.fieldMap["MasterDataTypeID"] = t.MasterDataTypeID
	t.fieldMap["Code"] = t.Code
}

func (t tmMasterDatum) clone(db *gorm.DB) tmMasterDatum {
	t.tmMasterDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tmMasterDatum) replaceDB(db *gorm.DB) tmMasterDatum {
	t.tmMasterDatumDo.ReplaceDB(db)
	return t
}

type tmMasterDatumDo struct{ gen.DO }

func (t tmMasterDatumDo) Debug() *tmMasterDatumDo {
	return t.withDO(t.DO.Debug())
}

func (t tmMasterDatumDo) WithContext(ctx context.Context) *tmMasterDatumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tmMasterDatumDo) ReadDB() *tmMasterDatumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tmMasterDatumDo) WriteDB() *tmMasterDatumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tmMasterDatumDo) Session(config *gorm.Session) *tmMasterDatumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tmMasterDatumDo) Clauses(conds ...clause.Expression) *tmMasterDatumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tmMasterDatumDo) Returning(value interface{}, columns ...string) *tmMasterDatumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tmMasterDatumDo) Not(conds ...gen.Condition) *tmMasterDatumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tmMasterDatumDo) Or(conds ...gen.Condition) *tmMasterDatumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tmMasterDatumDo) Select(conds ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tmMasterDatumDo) Where(conds ...gen.Condition) *tmMasterDatumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tmMasterDatumDo) Order(conds ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tmMasterDatumDo) Distinct(cols ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tmMasterDatumDo) Omit(cols ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tmMasterDatumDo) Join(table schema.Tabler, on ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tmMasterDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tmMasterDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tmMasterDatumDo) Group(cols ...field.Expr) *tmMasterDatumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tmMasterDatumDo) Having(conds ...gen.Condition) *tmMasterDatumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tmMasterDatumDo) Limit(limit int) *tmMasterDatumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tmMasterDatumDo) Offset(offset int) *tmMasterDatumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tmMasterDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tmMasterDatumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tmMasterDatumDo) Unscoped() *tmMasterDatumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tmMasterDatumDo) Create(values ...*model.TmMasterDatum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tmMasterDatumDo) CreateInBatches(values []*model.TmMasterDatum, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tmMasterDatumDo) Save(values ...*model.TmMasterDatum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tmMasterDatumDo) First() (*model.TmMasterDatum, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmMasterDatum), nil
	}
}

func (t tmMasterDatumDo) Take() (*model.TmMasterDatum, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmMasterDatum), nil
	}
}

func (t tmMasterDatumDo) Last() (*model.TmMasterDatum, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmMasterDatum), nil
	}
}

func (t tmMasterDatumDo) Find() ([]*model.TmMasterDatum, error) {
	result, err := t.DO.Find()
	return result.([]*model.TmMasterDatum), err
}

func (t tmMasterDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TmMasterDatum, err error) {
	buf := make([]*model.TmMasterDatum, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tmMasterDatumDo) FindInBatches(result *[]*model.TmMasterDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tmMasterDatumDo) Attrs(attrs ...field.AssignExpr) *tmMasterDatumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tmMasterDatumDo) Assign(attrs ...field.AssignExpr) *tmMasterDatumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tmMasterDatumDo) Joins(fields ...field.RelationField) *tmMasterDatumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tmMasterDatumDo) Preload(fields ...field.RelationField) *tmMasterDatumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tmMasterDatumDo) FirstOrInit() (*model.TmMasterDatum, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmMasterDatum), nil
	}
}

func (t tmMasterDatumDo) FirstOrCreate() (*model.TmMasterDatum, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmMasterDatum), nil
	}
}

func (t tmMasterDatumDo) FindByPage(offset int, limit int) (result []*model.TmMasterDatum, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tmMasterDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tmMasterDatumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tmMasterDatumDo) Delete(models ...*model.TmMasterDatum) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tmMasterDatumDo) withDO(do gen.Dao) *tmMasterDatumDo {
	t.DO = *do.(*gen.DO)
	return t
}

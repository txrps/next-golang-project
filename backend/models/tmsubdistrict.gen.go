// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/txrps/next-golang-project/model"
)

func newTmSubdistrict(db *gorm.DB, opts ...gen.DOOption) tmSubdistrict {
	_tmSubdistrict := tmSubdistrict{}

	_tmSubdistrict.tmSubdistrictDo.UseDB(db, opts...)
	_tmSubdistrict.tmSubdistrictDo.UseModel(&model.TmSubdistrict{})

	tableName := _tmSubdistrict.tmSubdistrictDo.TableName()
	_tmSubdistrict.ALL = field.NewAsterisk(tableName)
	_tmSubdistrict.SubdistrictID = field.NewInt32(tableName, "SubdistrictID")
	_tmSubdistrict.SubdistrictName = field.NewString(tableName, "SubdistrictName")
	_tmSubdistrict.DistrictID = field.NewInt32(tableName, "DistrictID")

	_tmSubdistrict.fillFieldMap()

	return _tmSubdistrict
}

type tmSubdistrict struct {
	tmSubdistrictDo

	ALL             field.Asterisk
	SubdistrictID   field.Int32
	SubdistrictName field.String
	DistrictID      field.Int32

	fieldMap map[string]field.Expr
}

func (t tmSubdistrict) Table(newTableName string) *tmSubdistrict {
	t.tmSubdistrictDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tmSubdistrict) As(alias string) *tmSubdistrict {
	t.tmSubdistrictDo.DO = *(t.tmSubdistrictDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tmSubdistrict) updateTableName(table string) *tmSubdistrict {
	t.ALL = field.NewAsterisk(table)
	t.SubdistrictID = field.NewInt32(table, "SubdistrictID")
	t.SubdistrictName = field.NewString(table, "SubdistrictName")
	t.DistrictID = field.NewInt32(table, "DistrictID")

	t.fillFieldMap()

	return t
}

func (t *tmSubdistrict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tmSubdistrict) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["SubdistrictID"] = t.SubdistrictID
	t.fieldMap["SubdistrictName"] = t.SubdistrictName
	t.fieldMap["DistrictID"] = t.DistrictID
}

func (t tmSubdistrict) clone(db *gorm.DB) tmSubdistrict {
	t.tmSubdistrictDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tmSubdistrict) replaceDB(db *gorm.DB) tmSubdistrict {
	t.tmSubdistrictDo.ReplaceDB(db)
	return t
}

type tmSubdistrictDo struct{ gen.DO }

func (t tmSubdistrictDo) Debug() *tmSubdistrictDo {
	return t.withDO(t.DO.Debug())
}

func (t tmSubdistrictDo) WithContext(ctx context.Context) *tmSubdistrictDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tmSubdistrictDo) ReadDB() *tmSubdistrictDo {
	return t.Clauses(dbresolver.Read)
}

func (t tmSubdistrictDo) WriteDB() *tmSubdistrictDo {
	return t.Clauses(dbresolver.Write)
}

func (t tmSubdistrictDo) Session(config *gorm.Session) *tmSubdistrictDo {
	return t.withDO(t.DO.Session(config))
}

func (t tmSubdistrictDo) Clauses(conds ...clause.Expression) *tmSubdistrictDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tmSubdistrictDo) Returning(value interface{}, columns ...string) *tmSubdistrictDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tmSubdistrictDo) Not(conds ...gen.Condition) *tmSubdistrictDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tmSubdistrictDo) Or(conds ...gen.Condition) *tmSubdistrictDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tmSubdistrictDo) Select(conds ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tmSubdistrictDo) Where(conds ...gen.Condition) *tmSubdistrictDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tmSubdistrictDo) Order(conds ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tmSubdistrictDo) Distinct(cols ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tmSubdistrictDo) Omit(cols ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tmSubdistrictDo) Join(table schema.Tabler, on ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tmSubdistrictDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tmSubdistrictDo) RightJoin(table schema.Tabler, on ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tmSubdistrictDo) Group(cols ...field.Expr) *tmSubdistrictDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tmSubdistrictDo) Having(conds ...gen.Condition) *tmSubdistrictDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tmSubdistrictDo) Limit(limit int) *tmSubdistrictDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tmSubdistrictDo) Offset(offset int) *tmSubdistrictDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tmSubdistrictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tmSubdistrictDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tmSubdistrictDo) Unscoped() *tmSubdistrictDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tmSubdistrictDo) Create(values ...*model.TmSubdistrict) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tmSubdistrictDo) CreateInBatches(values []*model.TmSubdistrict, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tmSubdistrictDo) Save(values ...*model.TmSubdistrict) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tmSubdistrictDo) First() (*model.TmSubdistrict, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmSubdistrict), nil
	}
}

func (t tmSubdistrictDo) Take() (*model.TmSubdistrict, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmSubdistrict), nil
	}
}

func (t tmSubdistrictDo) Last() (*model.TmSubdistrict, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmSubdistrict), nil
	}
}

func (t tmSubdistrictDo) Find() ([]*model.TmSubdistrict, error) {
	result, err := t.DO.Find()
	return result.([]*model.TmSubdistrict), err
}

func (t tmSubdistrictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TmSubdistrict, err error) {
	buf := make([]*model.TmSubdistrict, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tmSubdistrictDo) FindInBatches(result *[]*model.TmSubdistrict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tmSubdistrictDo) Attrs(attrs ...field.AssignExpr) *tmSubdistrictDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tmSubdistrictDo) Assign(attrs ...field.AssignExpr) *tmSubdistrictDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tmSubdistrictDo) Joins(fields ...field.RelationField) *tmSubdistrictDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tmSubdistrictDo) Preload(fields ...field.RelationField) *tmSubdistrictDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tmSubdistrictDo) FirstOrInit() (*model.TmSubdistrict, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmSubdistrict), nil
	}
}

func (t tmSubdistrictDo) FirstOrCreate() (*model.TmSubdistrict, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmSubdistrict), nil
	}
}

func (t tmSubdistrictDo) FindByPage(offset int, limit int) (result []*model.TmSubdistrict, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tmSubdistrictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tmSubdistrictDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tmSubdistrictDo) Delete(models ...*model.TmSubdistrict) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tmSubdistrictDo) withDO(do gen.Dao) *tmSubdistrictDo {
	t.DO = *do.(*gen.DO)
	return t
}

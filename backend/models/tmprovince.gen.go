// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/txrps/next-golang-project/model"
)

func newTmProvince(db *gorm.DB, opts ...gen.DOOption) tmProvince {
	_tmProvince := tmProvince{}

	_tmProvince.tmProvinceDo.UseDB(db, opts...)
	_tmProvince.tmProvinceDo.UseModel(&model.TmProvince{})

	tableName := _tmProvince.tmProvinceDo.TableName()
	_tmProvince.ALL = field.NewAsterisk(tableName)
	_tmProvince.ProvinceID = field.NewInt32(tableName, "ProvinceID")
	_tmProvince.ProvinceName = field.NewString(tableName, "ProvinceName")
	_tmProvince.CountryID = field.NewInt32(tableName, "CountryID")

	_tmProvince.fillFieldMap()

	return _tmProvince
}

type tmProvince struct {
	tmProvinceDo

	ALL          field.Asterisk
	ProvinceID   field.Int32
	ProvinceName field.String
	CountryID    field.Int32

	fieldMap map[string]field.Expr
}

func (t tmProvince) Table(newTableName string) *tmProvince {
	t.tmProvinceDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tmProvince) As(alias string) *tmProvince {
	t.tmProvinceDo.DO = *(t.tmProvinceDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tmProvince) updateTableName(table string) *tmProvince {
	t.ALL = field.NewAsterisk(table)
	t.ProvinceID = field.NewInt32(table, "ProvinceID")
	t.ProvinceName = field.NewString(table, "ProvinceName")
	t.CountryID = field.NewInt32(table, "CountryID")

	t.fillFieldMap()

	return t
}

func (t *tmProvince) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tmProvince) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["ProvinceID"] = t.ProvinceID
	t.fieldMap["ProvinceName"] = t.ProvinceName
	t.fieldMap["CountryID"] = t.CountryID
}

func (t tmProvince) clone(db *gorm.DB) tmProvince {
	t.tmProvinceDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tmProvince) replaceDB(db *gorm.DB) tmProvince {
	t.tmProvinceDo.ReplaceDB(db)
	return t
}

type tmProvinceDo struct{ gen.DO }

func (t tmProvinceDo) Debug() *tmProvinceDo {
	return t.withDO(t.DO.Debug())
}

func (t tmProvinceDo) WithContext(ctx context.Context) *tmProvinceDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tmProvinceDo) ReadDB() *tmProvinceDo {
	return t.Clauses(dbresolver.Read)
}

func (t tmProvinceDo) WriteDB() *tmProvinceDo {
	return t.Clauses(dbresolver.Write)
}

func (t tmProvinceDo) Session(config *gorm.Session) *tmProvinceDo {
	return t.withDO(t.DO.Session(config))
}

func (t tmProvinceDo) Clauses(conds ...clause.Expression) *tmProvinceDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tmProvinceDo) Returning(value interface{}, columns ...string) *tmProvinceDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tmProvinceDo) Not(conds ...gen.Condition) *tmProvinceDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tmProvinceDo) Or(conds ...gen.Condition) *tmProvinceDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tmProvinceDo) Select(conds ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tmProvinceDo) Where(conds ...gen.Condition) *tmProvinceDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tmProvinceDo) Order(conds ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tmProvinceDo) Distinct(cols ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tmProvinceDo) Omit(cols ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tmProvinceDo) Join(table schema.Tabler, on ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tmProvinceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tmProvinceDo) RightJoin(table schema.Tabler, on ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tmProvinceDo) Group(cols ...field.Expr) *tmProvinceDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tmProvinceDo) Having(conds ...gen.Condition) *tmProvinceDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tmProvinceDo) Limit(limit int) *tmProvinceDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tmProvinceDo) Offset(offset int) *tmProvinceDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tmProvinceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tmProvinceDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tmProvinceDo) Unscoped() *tmProvinceDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tmProvinceDo) Create(values ...*model.TmProvince) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tmProvinceDo) CreateInBatches(values []*model.TmProvince, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tmProvinceDo) Save(values ...*model.TmProvince) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tmProvinceDo) First() (*model.TmProvince, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmProvince), nil
	}
}

func (t tmProvinceDo) Take() (*model.TmProvince, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmProvince), nil
	}
}

func (t tmProvinceDo) Last() (*model.TmProvince, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmProvince), nil
	}
}

func (t tmProvinceDo) Find() ([]*model.TmProvince, error) {
	result, err := t.DO.Find()
	return result.([]*model.TmProvince), err
}

func (t tmProvinceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TmProvince, err error) {
	buf := make([]*model.TmProvince, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tmProvinceDo) FindInBatches(result *[]*model.TmProvince, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tmProvinceDo) Attrs(attrs ...field.AssignExpr) *tmProvinceDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tmProvinceDo) Assign(attrs ...field.AssignExpr) *tmProvinceDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tmProvinceDo) Joins(fields ...field.RelationField) *tmProvinceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tmProvinceDo) Preload(fields ...field.RelationField) *tmProvinceDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tmProvinceDo) FirstOrInit() (*model.TmProvince, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmProvince), nil
	}
}

func (t tmProvinceDo) FirstOrCreate() (*model.TmProvince, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TmProvince), nil
	}
}

func (t tmProvinceDo) FindByPage(offset int, limit int) (result []*model.TmProvince, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tmProvinceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tmProvinceDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tmProvinceDo) Delete(models ...*model.TmProvince) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tmProvinceDo) withDO(do gen.Dao) *tmProvinceDo {
	t.DO = *do.(*gen.DO)
	return t
}
